# vim: ft=sh
#
# TODO: REFACTOR: "printf -v var" can be in some cases used to replace eval
# TODO: read:
#    http://fvue.nl/wiki/Bash:_passing_variables_by_reference
#    http://www.mail-archive.com/bug-bash@gnu.org/msg07352.html
#

# adds the $2 param to the beginning of the $1 variable
addToVarBeg() {
    export $1="${2}${!1}"
}


# adds the $2 param to the end of the $1 variable
addToVarEnd() {
    export $1="${!1}${2}"
}


# Check if PATH contains given data already.
# $1: content which is checked against PATH variable.
# $2: Alternative PATH like variable to work on, default is the "PATH"
check_if_already_in_path() {
    local _path_var="PATH"
    [ -n "${2}" ] && _path_var="${2}"

    if ! $(\grep -qE ":?${1}(:|$)" <(echo "${!_path_var}")); then
        return 1 # was not
    fi
    return 0 # was
}

# adds the $1 param to the beginning of PATH variable
# $1:
# $2: Alternative PATH like variable to work on, default is the "PATH"
addToPathBeg() {
    if ! check_if_already_in_path ${1} ${2}; then
        local _path_var="PATH"
        [ -n "${2}" ] && _path_var="${2}"
        if [[ "${!_path_var}" ]]; then
            addToVarBeg "${_path_var}" "${1}:"
        else
            # In case if path variable is empty
            printf -v "${_path_var}" "%s" "${1}"
        fi
    fi
}


# adds the $1 param to the end of PATH variable
# $1:
# $2: Alternative PATH like variable to work on, default is the "PATH"
addToPathEnd() {
    if ! check_if_already_in_path ${1} ${2}; then
        local _path_var="PATH"
        [ -n "${2}" ] && _path_var="${2}"
        if [[ "${!_path_var}" ]]; then
            addToVarEnd "${_path_var}" ":${1}"
        else
            # In case if path variable is empty
            printf -v "${_path_var}" "%s" "${1}"
        fi
    fi
}
alias addToPath='addToPathEnd'


#http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_11_02.html
# adds to path front or after to PATH, maybe better check how differs
#pathmunge () {
#    if ! echo $PATH | /bin/egrep -q "(^|:)$1($|:)" ; then
#        if [ "$2" = "after" ] ; then
#            PATH=$PATH:$1
#        else
#            PATH=$1:$PATH
#        fi
#    fi
#}


# replace in path or add if replace pattern not found in path
# $1    new path
# $2    old path in extended filename extension (extglob) syntax
# for example replace any user bin directory with "/home/user/bin":
# replaceAddInPath '/home/user/bin' '/home/+([[:alpha:]])/bin'
# above example needs extglob shell option to be set
replaceAddInPath() {
    export PATH=${PATH/$2/$1}
    # if didn't exist (no replacement done) add, and only add if something was
    # given
    [[ "${1}" ]] && addToPathEnd "$1"
}


check_if_symlink_valid() {
    # if is symlink and not readable
    if [[ -h "${1}" && ! -r "${1}" ]]; then
        return 0
    else
        return 1
    fi
}


remove_symlink_if_bad() {
    check_if_symlink_valid "${1}"
    if [ "$?" -eq 0 ]; then
        rm -iv "${1}"
    fi
}


# Checks if given path is absolute.
# $1: Variable name containing the path
Is_path_absolute() {
    if [[ "${!1:0:1}" == "/" ]]; then
        return 0
    fi
    return 1
}


# TODO: make 3 param version that 3th param holds the variable where result is
# stored
# $1 name of the parameter that holds the file to be checked, resulting
# absolut dir is stored to the same variable
# $2 absolut base path, default current working dir
change_to_absolut_dir() {
    shopt -s extglob
    # Check if already absolute path
    Is_path_absolute "${1}" && return

    local ___l_rmz="${2:-$(pwd)}/${!1}"
    # clean ".." from ___l_rmz, requires extglob
    while [ "${___l_rmz/\/..\/}" != "${___l_rmz}" ]; do
        ___l_rmz=${___l_rmz//\/+([^\/])\/..\//\/};
    done

    # clean trailing "/dir/.."
    ___l_rmz=${___l_rmz/%\/+([^\/])\/../}

    # Clean trailing ".", happens if given path is "." for example
    ___l_rmz=${___l_rmz/%\/.//}

    printf -v "${1}" "%s" "${___l_rmz}"
}


# Returns paths parent path in same variable
# $1: Variable name of a variable containing a path
Get_parent_path() {
    local __bf__path="${!1}"
    __bf__path="${__bf__path%/}"
    __bf__path="${__bf__path%/*}"
    printf -v "${1}" "%s" "${__bf__path}"
}


awhich() {
    (alias; declare -f) | /usr/bin/which --tty-only --read-alias --read-functions --show-tilde --show-dot $@
}


# $1: required program to be found with awhich.
requires() {
    awhich "${1}" &>/dev/null || \
        {
            echo "Error: \"${1}\" callable required (not found with awhich)." 1>&2
            exit 1
        }
}

# $1: Variable name which is required to have value set.
Requires_var() {
    [[ -v "${1}" ]] || \
        {
            echo "Error: Variable \"${1}\" is needed." 1>$2
            exit 1
        }
}

# $1: parameter name which other string parameters ar stored
# $2..N: String parameters which are concatenated to ${!1}
Join() {
    local ___ft="${1}"
    shift
    eval "${___ft}"="\${!___ft}\${@}"
}


# simple msg function to use with color printing
# $1: "-n" optional parameter indicating not to print a newline.
# $1: color code
# $2..N: message to be printed
Cmsg() {
    [[ "${1}" == "-n" ]] && { local no_newline='yes'; shift; }
    # 16 colors on black

    # hilight colors on black
    local WHITE_H="\033[1;37;40m"
    local CYAN_H="\033[1;36;40m"
    local PURPLE_H="\033[1;35;40m"
    local BLUE_H="\033[1;34;40m"
    local YELLOW_H="\033[1;33;40m"
    local GREEN_H="\033[1;32;40m"
    local RED_H="\033[1;31;40m"
    local BLACK_H="\033[1;30;40m"

    # colors on black
    local WHITE="\033[37;40m"
    local CYAN="\033[36;40m"
    local PURPLE="\033[35;40m"
    local BLUE="\033[34;40m"
    local YELLOW="\033[33;40m"
    local GREEN="\033[32;40m"
    local RED="\033[31;40m"
    local BLACK="\033[30;40m"

    # clear colors
    local CLR_COLOR="\033[1;0m"

    printf "${!1}${@:2}${CLR_COLOR}"
    [[ "${no_newline}" == 'yes' ]] || printf "\n"
}


# Cmsg() wrapper which prints to stderr
Cemsg() {
    Cmsg $@ 1>&2
}


# simple function to just echo every parameter to stderr
# $1..N: These parameters are echoed to stderr.
Eecho() {
    echo $@ 1>&2
}


# $1: verbosity level which is required for the message to printed
# $2..N: message
Vecho() {
    if [[ ${VERBOSITY_LEVEL} -ge ${1} ]]; then
        echo ${@}
    fi
}


# Gets current scripts path when given "${BASH_SOURCE[0]}" as parameter
# $1: "${BASH_SOURCE[0]}"
# $2: parameter name where script path is to be stored
Get_script_path() {
    [[ "${1}" && "${2}" ]] || { Eecho "ERROR: Get_script_path needs two parameters."; return 1; }

    # get script path
    local script_path="${1}";

    # unlink path
    if [ -h "${script_path}" ]; then
        while [ -h "${script_path}" ]; do script_path=`readlink "${script_path}"`; done
    fi

    pushd . > /dev/null
    cd "$(dirname "${script_path}")" > /dev/null
    script_path="$(pwd)";
    popd  > /dev/null

    eval "${2}"="\${script_path}"
}

# Find files matching given regex (egrep style) from the given dir.
#
# Stores results to an array varible which name is given as a parameter.
# If given array name is "-" print found files to stdout.
#
# Options:
#   $1: -mp: match whole path not only basename
#   $1: -maxd: max search depth (default 1)
#   $1: -mind: min search depth (default 0)
#
# Positional:
#   $1: search dir
#   $2: regex
#   $3: array name where find archive file names are to be stored
Find_files() {
    local match_path="false"
    local max_depth=1
    local min_depth=0
    # Reading opts
    while [[ ${1} =~ ^-m(axd|ind|p) && ${1} != "--" ]]; do
        [[ ${1} == "-maxd" ]] && { max_depth="${2}"; shift 2; }
        [[ ${1} == "-mind" ]] && { min_depth="${2}"; shift 2; }
        [[ ${1} == "-mp" ]] && { match_path="true"; shift; }
    done

    [[ "${1}" ]] || { Eecho "Find_archives(): Error: Search dir must be given."; return 1; }
    [[ "${2}" ]] || { Eecho "Find_archives(): Error: Regex must be given."; return 1; }
    [[ "${3}" ]] || { Eecho "find_archives(): Error: Array name must be given."; return 1; }

    local search_dir="${1}"
    if [[ ${match_path} == "false" ]]; then
        # TODO: is there way with find to match just the basename not the whole path
        #       because this is not a complete fix, for example '^' doesn't work in given regex
        local regex=".*/${2}"
    else
        local regex="${2}"
    fi
    local array_name="${3}"

    local __BF__find_args="-maxdepth ${max_depth} \
        -mindepth ${min_depth} \
        -regextype posix-egrep"

    # Ok, bash variable expansion is confusing, this might be done easily without eval or not.
    # The problem arises when shell globbing symbols are present in the given regex.
    if [[ $array_name == "-" ]]; then
        eval find "\"${search_dir}\" ${__BF__find_args} -iregex '${regex}'"
    else
        # TODO: use Exec_array_out
        readarray -t "${array_name}" < \
            <(eval find "\"${search_dir}\" ${__BF__find_args} -iregex '${regex}'")
    fi
}

# $1: file name to be sourced if it exists
Source_if_exists() {
    [[ -e ${1} ]] && source "${1}"
}

# $1: array variable name
Print_array() {
    # NOTE: another way to preserve spaces and access array by it's name (ugly as hell)
    #eval "for c in \"\${${1}[@]}\"; do temp_array+=(\"\${c}\"); done"

    # To get array variables indirectly: local vars="${1}[@]"; echo ${!vars}
    # How to get arrays keys indirectly without using eval

    local i  # We use "i" varible and want to keep it changes only locally!
    local variables_i="${1}[\${i}]"
    eval 'local -a keys=(${!'${1}'[@]})' # XXX: How to do this without eval

    for i in "${keys[@]}"; do
        echo "$i: ${!variables_i}"
    done
}

# $1: array variable name
Sort_array() {
    local -a temp_array
    local temp="${1}[@]"
    temp_array+=("${!temp}")
    readarray -t "${1}" < \
        <(
            for v in "${temp_array[@]}"; do
                echo "${v}"
            done | sort
        )
}

# $1: array variable name
Uniq_array() {
    local -a temp_array
    local temp="${1}[@]"
    temp_array+=("${!temp}")
    readarray -t "${1}" < \
        <(
            for v in "${temp_array[@]}"; do
                echo "${v}"
            done | sort | uniq
        )
}

# $1: array name
# $2: value to be appended to the array
Append_array() {
    local array_name="${1}"; shift
    local value_to_be_appended="${1}"; shift

    eval "${array_name}[\${#${array_name}[@]}]=\"${value_to_be_appended}\""
}

# $1: element as value
# $2: array name
In_array() {
    local element="${1}"; shift
    local array_name="${2}"; shift

    local i  # We use "i" varible and want to keep it changes only locally!
    local variables_i="${array_name}[\${i}]"
    eval 'local -a keys=(${!'${array_name}'[@]})' # XXX: How to do this without eval

    for i in "${keys[@]}"; do
        [[ ${!variables_i} == ${element} ]] && return 0 # element found in the given array
    done
    return 1
}

# Selects elements from given array and stores them to target array.
# $1: Source array name
# $2: Target array name
# $3: extended-regex to match.
# $4: If "!" inverts filter.
Select_to_array() {
    local __BF__array="${1}[@]"
    local __BF__target_array="${2}"
    local __BF__regex="${3}"
    local __BF__i
    readarray -t "${__BF__target_array}" < \
        <(
            for __BF__i in "${!__BF__array}"; do
                if [[ "${3}" == "!" ]]; then
                    ! [[ ${__BF__i} =~ ${__BF__regex} ]] && echo "${__BF__i}"
                else
                    [[ ${__BF__i} =~ ${__BF__regex} ]] && echo "${__BF__i}"
                fi
            done
        )
}

# Removes (recreates) given array by removing variables which match given regex or string.
# $1: array name
# $2: extended-regex to match or string.
# $3: If "!" inverts filter and if "str" then the regex is interpreted to be a
#     plain string, matching is then done with '=='.
Filter_array() {
    local array="${1}[@]"
    local regex="${2}"
    local i
    readarray -t "${1}" < \
        <(
            for i in "${!array}"; do
                if [[ "${3}" == "str" ]]; then
                    [[ ${i} == ${regex} ]] || echo "${i}"
                elif [[ "${3}" == "!" ]]; then
                    ! [[ ${i} =~ ${regex} ]] || echo "${i}"
                else
                    [[ ${i} =~ ${regex} ]] || echo "${i}"
                fi
            done
        )
}

# Splits given array to two arrays according to given regex.
# $1: extended-regex
# $2: source array variable name
# $3: if $1 regex matches target array variable name
# $4: if $1 does not match target array variable name
Split_array() {
    local regex="${1}"
    local source_array="${2}[@]"
    local target_array1="${3}"
    local target_array2="${4}"

    local i
    local i1=0
    local i2=0
    for i in "${!source_array}"; do
        if [[ ${i} =~ ${regex} ]]; then
            eval "${target_array1}[${i1}]=\"${i}\""
            ((i1++))
        else
            eval "${target_array2}[${i2}]=\"${i}\""
            ((i2++))
        fi
    done
}

# $1: Array variable name where output is stored.
# $n: Command and it's arguments.
Exec_array_out() {
    out_array_name="${1}"; shift
    readarray -t "${out_array_name}" < \
        <(eval "${@}")
}

#Is_array() {
#    local var="${1}"
#
#    local pattern="^declare"
#
#    type=$(declare -p "${var}" 2>/dev/null)
#    if [[ ${type} =~ ${pattern}" -a" ]]; then
#        echo 1
#    fi
#}

# Clean this
#Array_copy() {
#    local source_a=$1; shift
#    local dest_a=$1; shift
#
#    #if [[ -n $(is_array $source) && -n $dest ]]; then
#    eval "$dest=(\"\${$var""[@]}\")"
#    #fi
#}

# Generates next non existing filename with given prefix.
#
# The prefix is the first name, and if it exists the next ones are names
# postfixed with ".<number>", where the number is from ordered range [0-19].
#
# The first parameter defines what happens when all the generated
# filenames in the range exists:
#
# TODO: add option for creating the generated filename with mktemp, or similar.
#       Question is how to use mktemp to generate sequential names.
#
# E: Produce error, and return nothing.
# L: Keep returing the last generated name.
# C: Cycle names always selecting name next to one, that has the most recent creation date.
#
# $1: Error action: Action when max count is exceeded.
# $2: Variable name containing the prefix for the filename.
#     The result is stored to this variable if new filename generation succeeded.
# $3: Max count of .* postfix file names produced. Prefix variable given is not modified if count is exceeded.
Next_free_fn() {
    shopt -s extglob
    local error_action="${1}"
    [[ ${error_action} =~ ^(E|L|C)$ ]] || { Eecho "Error: Invalid error action given (E|L|C)."; return 1; }
    local prefix="${!2}"
    local max_count=${3:-10000}

    local count=0
    [[ -e ${prefix} ]] || return 0
    org_prefix="${prefix}"
    prefix="${prefix}.${count}" # Prepare first name

    while [[ -e ${prefix} && ((count} < max_count)) ]]; do
        ((++count))
        prefix="${org_prefix}.${count}"    # New prefix
    done

    if ((count >= ${max_count} )); then
        if [[ ${error_action} == "E" ]]; then
            Eecho "Error: Last name of the filename range existed: ${prefix}."
            return 1
        elif [[ ${error_action} == "L" ]]; then
            :
        else
            echo TODO cycling
        fi
    fi

    printf -v "${2}" "%s" "${prefix}"
    return 0
}

Petc() {
    echo "Press enter to continue.."
    read
}

# $1: Question to be asked as prompt for yes/no answer
# $2: Default answer "y|n", if not given then no default answer is accepted.
Pyn() {
    local __BF__question="${1}"
    local __BF__default="${2}"
    local __BF__answer
    local __BF__question_postfix
    local __BF__yes_postfix="[Y/n]: "
    local __BF__no_postfix="[y/N]: "
    local __BF__postfix="[y/n]: "

    if [[ "${__BF__default}" =~ ^(y|Y|0) ]]; then
        __BF__question_postfix="${__BF__yes_postfix}"
    elif ! [[ "${__BF__default}" ]]; then
        __BF__question_postfix="${__BF__postfix}"
    else
        __BF__question_postfix="${__BF__no_postfix}"
    fi

    echo -n "${__BF__question} ${__BF__question_postfix}"
    read __BF__answer

    if [[ "${__BF__answer}" =~ ^( )*$ && "${__BF__question_postfix}" != "${__BF__postfix}" ]]; then
        [[ "${__BF__question_postfix}" == "${__BF__yes_postfix}" ]] && return 0
        return 1
    elif [[ "${__BF__answer}" =~ ^(y|Y)((e|E)(s|S))?$ ]]; then
        return 0
    elif [[ "${__BF__answer}" =~ ^(n|N)(o|O)?$ ]]; then
        return 1
    else
        Eecho "Please answer [Y]es or [N]o.."
        Pyn "${1}" "${2}"
        return
    fi

    return 1
}



# Prompt yes/no question. Returns 0 if "yes" is answered or defaulted and 1 if "no" is answered or defaulted.
# $1: Prompt text
# $2: String either "default-yes" or "default-no", if not given then no default answer is set.
Pyesno() {
    local __BF__answer
    local __BF__yn
    local __BF__regex_yes
    local __BF__regex_no
    local __BF__must_match_regex
    local __BF__default_yes

    __BF__regex_yes='^([Yy]|[Yy][Ee][Ss])$'
    __BF__regex_no='^([Nn]|[Nn][Oo])$'
    __BF__must_match_regex='^([Yy]|[Nn]|[Yy][Ee][Ss]|[Nn][Oo]|[[:space:]]*)$'

    if [[ "${2}" == "default-yes" ]]; then
        __BF__default_yes="true"
        __BF__yn="[Y/n]: "
    elif [[ "${2}" == "default-no" ]]; then
        __BF__default_yes="false"
        __BF__yn="[y/N]: "
    else
        __BF__must_match_regex='^([Yy]|[Nn]|[Yy][Ee][Ss]|[Nn][Oo])$'
        __BF__yn='[y/n]: '
    fi
    read -p "${1} ${__BF__yn}" __BF__answer
    until [[ ${__BF__answer} =~ ${__BF__must_match_regex} ]]; do
        Eecho "Please answer [y]es or [n]o."
        read -p "${1} ${__BF__yn}" __BF__answer
    done

    if [[ ${__BF__answer} =~ ^[[:space:]]*$ ]]; then
        [[ ${__BF__default_yes} == "true" ]]; return $?
    fi

    if [[ ${__BF__answer} =~ ${__BF__regex_yes} ]]; then
        return 0
    elif [[ ${__BF__answer} =~ ${__BF__regex_no} ]]; then
        return 1
    fi
    return 42 # We should newer reach this point
}

# Returns total size of files/dirs in given array in bytes
# $1: array of file/dir names
# $2: variable where sum of given file/dir sizes is to be stored
Total_size() {
    local paths_n="${1}"; shift
    local total_size_n="${1}"; shift

    local paths="${paths_n}[\${path}]"
    eval 'local -a keys=(${!'${paths_n}'[@]})' # XXX: How to do this without eval

    local __bf__sum=0
    for path in "${keys[@]}"; do
        if [[ -d "${!paths}" ]]; then
            local temp_dir_size="$(du -b f)"
            temp_dir_size="${temp_dir_size%% *}"
            ((__bf__sum=__bf__sum+temp_dir_size))
        elif [[ -e "${!paths}" ]]; then
            local temp_file_size="$(stat -c%s "${!paths}")"
            ((__bf__sum=__bf__sum+temp_file_size))
        fi
    done

    # NOTE: printf is safer than eval, total_size_n can be anything..
    #eval "${total_size_n}=${__bf__sum}"
    printf -v "${total_size_n}" "%s" "${__bf__sum}"
}

# Returns tag (number) for current desktop
# $1: Variable name where current desktop tag is to be stored.
Get_current_desktop_tag() {
    local __BF__vn_current_tag="${1}"
    requires xdotool
    requires python
    local __BF__current_desktop="$(xdotool get_desktop)"
    printf -v "${__BF__vn_current_tag}" "%i" "$(python -c "import math; print(math.floor(math.log(${__BF__current_desktop},2)))")"
}

# TODO: print shell color codes also
# Also other \e[.. code stuff
print_colors_256()
{
    ( x=`tput op` y=`printf %$((${COLUMNS}-6))s`;

    for i in {0..256}; do

        o=00$i;

        echo -e ${o:${#o}-3:3} `tput setaf $i;tput setab $i`${y// /=}$x;

    done )
}

# $1: Dir name to get
# $2: Variable name where to dir is to be set
Get_XDG_dir() {
    test -f ${XDG_CONFIG_HOME:-~/.config}/user-dirs.dirs && source ${XDG_CONFIG_HOME:-~/.config}/user-dirs.dirs
    __bf__get_var_name="XDG_${1}_DIR"
    printf -v "${2}" "%s" "${!__bf__get_var_name}"

    # Check if dir name not found
    if ! [[ "${!2}" ]]; then
        # Desktop defaults
        if [[ ${1} = "DESKTOP" ]]; then
            printf -v "${2}" "%s" "$HOME/Desktop"
        else
            return 1
        fi
    fi
    return 0
}

# Calls vimdiff for given files pairing them with filenames with given extension removed.
# $1: Array of files with $2 extension.
# $2: Extension which is removed from $1 files to produces a file to diff against.
# $3: Cleanup function which receives filename from $1 after vimdiff has been called successfully.
Diff_edit() {
    local __BF__files="${1}"
    local __BF__extension="${2}"
    local __BF__cleanup_func="${3}"

    local i
    local __BF__fn_i="${1}[\${i}]"
    eval 'local -a keys=(${!'${1}'[@]})'

    for i in "${keys[@]}"; do
        local __BF__f="${!__BF__fn_i}"
        if [[ -w ${__BF__f} && -w ${__BF__f%${__BF__extension}} ]]; then
            if vimdiff "${__BF__f%${__BF__extension}}" "${__BF__f}"; then
                if [[ "${__BF__cleanup_func}" ]]; then
                    ${__BF__cleanup_func} "${__BF__f}" || {
                        Eecho "Error: cleanup function ${__BF__cleanup_func} failed."
                        return 1
                    }
                fi
            else
                Eecho "Error: vimdiff returned non-zero exit status -> stopping."
                return 1
            fi
        else
            Eecho "Warning: skipping '${__BF__f}' because of permission issues."
        fi
    done
    return 0
}
